Index: app/src/main/java/com/example/canchem/ui/myFavorite/MyFavoriteActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.canchem.ui.myFavorite\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.canchem.R\r\nimport com.example.canchem.ui.home.SearchActivity\r\nimport com.example.canchem.data.source.myinterface.DeleteAllMyFavoriteInterface\r\nimport com.example.canchem.data.source.dataclass.FavoriteDataList\r\nimport com.example.canchem.data.source.adapter.FavoriteRecyclerViewAdapter\r\nimport com.example.canchem.data.source.myinterface.DeleteOneStarInterface\r\nimport com.example.canchem.data.source.myinterface.MyFavoriteInterface\r\nimport com.example.canchem.data.source.util.UserId\r\nimport com.example.canchem.databinding.ActivityMyFavoriteBinding\r\nimport com.example.canchem.ui.main.MainActivity\r\nimport com.example.canchem.ui.searchHistory.SearchHistoryActivity\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.converter.scalars.ScalarsConverterFactory\r\n\r\nclass MyFavoriteActivity : AppCompatActivity() {\r\n    private val ip : String = \"13.124.223.31\"\r\n    //recyclerViewAdapter\r\n    private lateinit var adapter: FavoriteRecyclerViewAdapter\r\n    private lateinit var binding: ActivityMyFavoriteBinding\r\n    lateinit var mDatas : FavoriteDataList // 즐겨찾기 데이터 리스트 변수\r\n    private var backpressedTime: Long = 0\r\n    private var toastClickTime : Long = 0\r\n\r\n    private lateinit var drawer : DrawerLayout\r\n    companion object{\r\n        // finish()구현을 위한 액티비티 변수\r\n        var myFavoriteActivity : MyFavoriteActivity ?= null\r\n\r\n        private var instance: MyFavoriteActivity? = null\r\n//        private var id = \"-100\"\r\n        private val idList = ArrayList<String>()\r\n\r\n        fun setIsBtnStar(isStar : Boolean, id : String){\r\n            if(isStar){\r\n                idList.remove(id)\r\n            }else{\r\n                idList.add(id)\r\n            }\r\n        }\r\n\r\n        fun getInstance(): MyFavoriteActivity? {\r\n            return instance\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMyFavoriteBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        adapter = FavoriteRecyclerViewAdapter() //어댑터 객체 만듦\r\n        drawer = binding.myFavorite\r\n\r\n        // 자신의 액티비티 담기\r\n        myFavoriteActivity = this\r\n\r\n        //firebase에 저장된 토큰 가져오기\r\n        val database = Firebase.database\r\n        val tokenInFirebase = database.getReference(\"Token\")\r\n        var accessToken : String? = null\r\n        tokenInFirebase.child(UserId.userId!!).addValueEventListener(object: ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                // This method is called once with the initial value and again\r\n                // whenever data at this location is updated.\r\n                accessToken = snapshot.getValue().toString()\r\n//                Toast.makeText(this@MyFavoriteActivity,\"파이어베이스 성공!\", Toast.LENGTH_SHORT).show()\r\n                Log.d(\"onDataChange는 \" , \"성공\")\r\n                // retrofit 변수 생성\r\n                val retrofit = Retrofit.Builder()\r\n                    .baseUrl(\"http://$ip:8080/\")\r\n                    .addConverterFactory(GsonConverterFactory.create()) //kotlin to json(역 일수도)\r\n                    .build()\r\n\r\n                // retrofit객체 생성\r\n                val myFavoriteService = retrofit.create(MyFavoriteInterface::class.java)\r\n                val call = myFavoriteService.getFavoriteInfo(accessToken)\r\n\r\n\r\n                call.enqueue(object : Callback<FavoriteDataList> {\r\n                    override fun onResponse(call: Call<FavoriteDataList>, response: Response<FavoriteDataList>) { //요청성공시\r\n                        if (response.isSuccessful) {\r\n//                            Toast.makeText(this@MyFavoriteActivity,response.toString(), Toast.LENGTH_SHORT).show()\r\n                            mDatas = response.body()!! //여기에 retrofit으로 springboot에서 받은 검색기록 추가.\r\n                            Log.d(\"mDatas는 \" , mDatas.toString())\r\n                            for(i in idList){\r\n//                                Toast.makeText(this@MyFavoriteActivity,mDatas.favoriteList.get(i.toInt()).toString(),Toast.LENGTH_SHORT).show()\r\n//                                mDatas.favoriteList.remove(mDatas.favoriteList.get(i.toInt()))\r\n                                idList.forEach { id ->\r\n                                    mDatas.favoriteList.removeAll { it.id == id }\r\n                                    val retrofit2 = Retrofit.Builder()\r\n                                        .baseUrl(\"http://$ip:8080/\")\r\n                                        .addConverterFactory(ScalarsConverterFactory.create()) //kotlin to json(역 일수도)\r\n                                        .build()\r\n                                    val myFavoriteDelete = retrofit.create(DeleteOneStarInterface::class.java)\r\n                                    val call2 = myFavoriteDelete.deleteStar(accessToken, id)\r\n                                    call2.enqueue(object : Callback<String> {\r\n                                        override fun onResponse(call: Call<String>, response: Response<String>) { //요청성공시\r\n                                            if (response.isSuccessful) {\r\n                                                Log.d(\"삭제삭제\", \"굿\")\r\n                                            }\r\n                                        }\r\n                                        override fun onFailure(call: Call<String>, t: Throwable) { //요청실패시\r\n                                            Toast.makeText(this@MyFavoriteActivity, \"SearchHistoryActivity Server cannot 통신\", Toast.LENGTH_SHORT).show()\r\n                                            Log.e(\"call error\", t.toString())\r\n                                        }\r\n                                    })\r\n                                }\r\n                            }\r\n                            recyclerView(mDatas)\r\n                            Toast.makeText(this@MyFavoriteActivity, mDatas.toString(), Toast.LENGTH_SHORT).show()\r\n                        } else {\r\n                            Log.e(ContentValues.TAG, \"Response unsuccessful: ${response.code()}\")\r\n//                    Toast.makeText(this@SearchHistoryActivity, \"SearchHistoryActivity Error\", Toast.LENGTH_SHORT).show()\r\n                        }\r\n                    }\r\n\r\n                    override fun onFailure(call: Call<FavoriteDataList>, t: Throwable) { //요청실패시\r\n                        Toast.makeText(this@MyFavoriteActivity, \"SearchHistoryActivity Server cannot 통신\", Toast.LENGTH_SHORT).show()\r\n                        Log.e(\"call error\", t.toString())\r\n                    }\r\n                })\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Log.w(ContentValues.TAG, \"Failed to read value.\", error.toException())\r\n            }\r\n        })\r\n\r\n        // 즐겨찾기 전체 삭제. 서버에 전송하는 코드 작성해야 함\r\n        binding.btnDeleteAll.setOnClickListener {\r\n            if(::mDatas.isInitialized){\r\n                AlertDialog.Builder(this)\r\n                    .setTitle(\"전체 삭제하시겠습니까?\")\r\n                    .setPositiveButton(\"확인\", object : DialogInterface.OnClickListener {\r\n                        override fun onClick(dialog: DialogInterface, which: Int) {\r\n                            val database = Firebase.database\r\n                            val tokenInFirebase = database.getReference(\"Token\")\r\n                            var accessToken: String? = null\r\n                            tokenInFirebase.child(UserId.userId!!)\r\n                                .addValueEventListener(object : ValueEventListener {\r\n                                    override fun onDataChange(snapshot: DataSnapshot) {\r\n                                        // This method is called once with the initial value and again\r\n                                        // whenever data at this location is updated.\r\n                                        accessToken = snapshot.getValue().toString()\r\n//                Toast.makeText(this@SearchHistoryActivity,\"파이어베이스 성공!\", Toast.LENGTH_SHORT).show()\r\n\r\n                                        // retrofit 변수 생성\r\n                                        val retrofit = Retrofit.Builder()\r\n                                            .baseUrl(\"http://$ip:8080/\")\r\n                                            .addConverterFactory(ScalarsConverterFactory.create()) //kotlin to json(역 일수도)\r\n                                            .build()\r\n\r\n                                        // retrofit객체 생성\r\n                                        val deleteAllService =\r\n                                            retrofit.create(DeleteAllMyFavoriteInterface::class.java)\r\n                                        val call = deleteAllService.deleteAll(accessToken)\r\n\r\n\r\n                                        call.enqueue(object : Callback<String> {\r\n                                            override fun onResponse(\r\n                                                call: Call<String>,\r\n                                                response: Response<String>\r\n                                            ) { //요청성공시\r\n                                                if (response.isSuccessful) {\r\n                                                    mDatas.favoriteList.clear()\r\n                                                    recyclerView(mDatas)\r\n                                                    Toast.makeText(\r\n                                                        this@MyFavoriteActivity,\r\n                                                        \"전체 삭제 완료\",\r\n                                                        Toast.LENGTH_SHORT\r\n                                                    ).show()\r\n                                                } else {\r\n//                    Toast.makeText(this@SearchHistoryActivity, \"SearchHistoryActivity Error\", Toast.LENGTH_SHORT).show()\r\n                                                }\r\n                                            }\r\n\r\n                                            override fun onFailure(\r\n                                                call: Call<String>,\r\n                                                t: Throwable\r\n                                            ) { //요청실패시\r\n                                                Toast.makeText(\r\n                                                    this@MyFavoriteActivity,\r\n                                                    \"SearchHistoryActivity Server cannot 통신\",\r\n                                                    Toast.LENGTH_SHORT\r\n                                                ).show()\r\n                                                Log.e(\"call error\", t.toString())\r\n                                            }\r\n                                        })\r\n                                    }\r\n\r\n                                    override fun onCancelled(error: DatabaseError) {\r\n                                        Log.w(\r\n                                            ContentValues.TAG,\r\n                                            \"Failed to read value.\",\r\n                                            error.toException()\r\n                                        )\r\n                                    }\r\n                                })\r\n                        }\r\n                    })\r\n                    .setNegativeButton(\"취소\", object : DialogInterface.OnClickListener {\r\n                        override fun onClick(dialog: DialogInterface, which: Int) {\r\n                            Log.d(\"MyTag\", \"negative\")\r\n                        }\r\n                    })\r\n                    .create()\r\n                    .show()\r\n            }else{\r\n                Toast.makeText(this@MyFavoriteActivity,\"전체 삭제할 데이터가 없습니다.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        drawer.addDrawerListener(object : DrawerLayout.DrawerListener {\r\n            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {\r\n                // 드로어가 슬라이드될 때 호출됨\r\n            }\r\n\r\n            override fun onDrawerOpened(drawerView: View) {\r\n                binding.btnDeleteAll.isEnabled = false\r\n            }\r\n\r\n            override fun onDrawerClosed(drawerView: View) {\r\n                binding.btnDeleteAll.isEnabled = true\r\n            }\r\n\r\n            override fun onDrawerStateChanged(newState: Int) {\r\n                // 드로어 상태가 변경될 때 호출됨\r\n            }\r\n        })\r\n        // side menu. 여기부터 아래 코드는 모든 액티비티에 포함됨.\r\n        // 메뉴 클릭시\r\n        binding.btnMenu.setOnClickListener {\r\n            drawer.openDrawer(Gravity.RIGHT)\r\n        }\r\n        // x버튼 클릭시\r\n        findViewById<ImageView>(R.id.btnX).setOnClickListener{\r\n            drawer.closeDrawer(Gravity.RIGHT)\r\n        }\r\n        // My Page 열기 버튼 클릭시\r\n        findViewById<ImageView>(R.id.btnOpenDown).setOnClickListener{\r\n            findViewById<ImageView>(R.id.btnOpenDown).visibility = View.GONE\r\n            findViewById<ImageView>(R.id.btnCloseUp).visibility = View.VISIBLE\r\n            findViewById<TextView>(R.id.btnMyFavorite).visibility = View.VISIBLE\r\n            findViewById<TextView>(R.id.btnSearchHistory).visibility = View.VISIBLE\r\n        }\r\n        // My Page 닫기 버튼 클릭시\r\n        findViewById<ImageView>(R.id.btnCloseUp).setOnClickListener{\r\n            findViewById<ImageView>(R.id.btnOpenDown).visibility = View.VISIBLE\r\n            findViewById<ImageView>(R.id.btnCloseUp).visibility = View.GONE\r\n            findViewById<TextView>(R.id.btnMyFavorite).visibility = View.GONE\r\n            findViewById<TextView>(R.id.btnSearchHistory).visibility = View.GONE\r\n        }\r\n        // My Page 글씨로 열고 닫기\r\n        findViewById<TextView>(R.id.btnMyPage).setOnClickListener{\r\n            if(findViewById<ImageView>(R.id.btnOpenDown).visibility == View.VISIBLE){\r\n                findViewById<ImageView>(R.id.btnOpenDown).visibility = View.GONE\r\n                findViewById<ImageView>(R.id.btnCloseUp).visibility = View.VISIBLE\r\n                findViewById<TextView>(R.id.btnMyFavorite).visibility = View.VISIBLE\r\n                findViewById<TextView>(R.id.btnSearchHistory).visibility = View.VISIBLE\r\n            }else{\r\n                findViewById<ImageView>(R.id.btnOpenDown).visibility = View.VISIBLE\r\n                findViewById<ImageView>(R.id.btnCloseUp).visibility = View.GONE\r\n                findViewById<TextView>(R.id.btnMyFavorite).visibility = View.GONE\r\n                findViewById<TextView>(R.id.btnSearchHistory).visibility = View.GONE\r\n            }\r\n        }\r\n        // 회원탈퇴 클릭시\r\n        findViewById<TextView>(R.id.btnSignout).setOnClickListener{\r\n            AlertDialog.Builder(this)\r\n                .setTitle(\"정말 탈퇴하시겠습니까?\")\r\n                .setMessage(\"탈퇴하실 경우, 모든 정보가 삭제됩니다.\")\r\n                .setPositiveButton(\"확인\", object : DialogInterface.OnClickListener {\r\n                    override fun onClick(dialog: DialogInterface, which: Int) {\r\n                        val intent = Intent(this@MyFavoriteActivity, MainActivity::class.java)\r\n                        intent.putExtra(\"function\", \"signout\")\r\n                        startActivity(intent)\r\n                        finish()\r\n                    }\r\n                })\r\n                .setNegativeButton(\"취소\", object : DialogInterface.OnClickListener {\r\n                    override fun onClick(dialog: DialogInterface, which: Int) {\r\n                        Log.d(\"MyTag\", \"negative\")\r\n                    }\r\n                })\r\n                .create()\r\n                .show()\r\n        }\r\n        // 로그아웃 클릭시\r\n        findViewById<TextView>(R.id.btnLogout).setOnClickListener{\r\n            Log.d(\"로그아웃\", \"클릭\")\r\n            AlertDialog.Builder(this)\r\n                .setTitle(\"정말 로그아웃 하시겠습니까?\")\r\n                .setPositiveButton(\"확인\", object : DialogInterface.OnClickListener {\r\n                    override fun onClick(dialog: DialogInterface, which: Int) {\r\n                        val intent = Intent(this@MyFavoriteActivity, MainActivity::class.java)\r\n                        Log.d(\"로그아웃\", \"으로 메인 넘어감\")\r\n                        intent.putExtra(\"function\", \"logout\")\r\n                        startActivity(intent)\r\n                        finish()\r\n                    }\r\n                })\r\n                .setNegativeButton(\"취소\", object : DialogInterface.OnClickListener {\r\n                    override fun onClick(dialog: DialogInterface, which: Int) {\r\n                        Log.d(\"MyTag\", \"negative\")\r\n                    }\r\n                })\r\n                .create()\r\n                .show()\r\n\r\n        }\r\n        // 즐겨찾기 클릭시\r\n        findViewById<TextView>(R.id.btnMyFavorite).setOnClickListener{\r\n            drawer.closeDrawer(Gravity.RIGHT)\r\n        }\r\n        // 검색기록 클릭시\r\n        findViewById<TextView>(R.id.btnSearchHistory).setOnClickListener{\r\n            val intent = Intent(this, SearchHistoryActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n        // 홈버튼 클릭시\r\n        findViewById<ImageView>(R.id.btnHome).setOnClickListener{\r\n            val intent = Intent(this, SearchActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"MissingSuperCall\")\r\n    override fun onBackPressed() {\r\n        if(drawer.isDrawerOpen(Gravity.RIGHT)){\r\n            drawer.closeDrawer(Gravity.RIGHT)\r\n        }else{\r\n            if (System.currentTimeMillis() > backpressedTime + 2000) {\r\n                backpressedTime = System.currentTimeMillis();\r\n                Toast.makeText(this, \"\\'뒤로\\' 버튼을 한번 더 누르시면 종료됩니다.\", Toast.LENGTH_SHORT).show();\r\n            } else if (System.currentTimeMillis() <= backpressedTime + 2000) {\r\n                finish()\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    fun recyclerView(mData: FavoriteDataList){\r\n        adapter.datalist = mData //데이터 넣어줌\r\n        binding.recyclerView.adapter = adapter //리사이클러뷰에 어댑터 연결\r\n        binding.recyclerView.layoutManager = LinearLayoutManager(this) //레이아웃 매니저 연결\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/canchem/ui/myFavorite/MyFavoriteActivity.kt b/app/src/main/java/com/example/canchem/ui/myFavorite/MyFavoriteActivity.kt
--- a/app/src/main/java/com/example/canchem/ui/myFavorite/MyFavoriteActivity.kt	(revision 07bfd70a095b07f7f54302e540c1d673c93fbad3)
+++ b/app/src/main/java/com/example/canchem/ui/myFavorite/MyFavoriteActivity.kt	(date 1717064029966)
@@ -359,13 +359,7 @@
         if(drawer.isDrawerOpen(Gravity.RIGHT)){
             drawer.closeDrawer(Gravity.RIGHT)
         }else{
-            if (System.currentTimeMillis() > backpressedTime + 2000) {
-                backpressedTime = System.currentTimeMillis();
-                Toast.makeText(this, "\'뒤로\' 버튼을 한번 더 누르시면 종료됩니다.", Toast.LENGTH_SHORT).show();
-            } else if (System.currentTimeMillis() <= backpressedTime + 2000) {
-                finish()
-            }
-
+            finish()
         }
     }
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <value>\r\n      <entry key=\"app\">\r\n        <State />\r\n      </entry>\r\n    </value>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 07bfd70a095b07f7f54302e540c1d673c93fbad3)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1717064030067)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="deploymentTargetDropDown">
     <value>
-      <entry key="app">
+      <entry key="CanChem">
         <State />
       </entry>
     </value>
